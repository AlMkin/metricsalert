// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/metrics/metrics.go
//
// Generated by this command:
//
//	mockgen -source=./internal/metrics/metrics.go -destination=github.com/AlMkin/metricsalert/mocks/mock_getter.go -package=mock_getter
//
// Package mock_getter is a generated GoMock package.
package mock_getter

import (
	reflect "reflect"

	metrics "github.com/AlMkin/metricsalert/internal/metrics"
	runtimeinfo "github.com/AlMkin/metricsalert/pkg/runtimeinfo"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricCollector is a mock of MetricCollector interface.
type MockMetricCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricCollectorMockRecorder
}

// MockMetricCollectorMockRecorder is the mock recorder for MockMetricCollector.
type MockMetricCollectorMockRecorder struct {
	mock *MockMetricCollector
}

// NewMockMetricCollector creates a new mock instance.
func NewMockMetricCollector(ctrl *gomock.Controller) *MockMetricCollector {
	mock := &MockMetricCollector{ctrl: ctrl}
	mock.recorder = &MockMetricCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricCollector) EXPECT() *MockMetricCollectorMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockMetricCollector) Collect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect")
}

// Collect indicates an expected call of Collect.
func (mr *MockMetricCollectorMockRecorder) Collect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockMetricCollector)(nil).Collect))
}

// GetMetrics mocks base method.
func (m *MockMetricCollector) GetMetrics() []metrics.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].([]metrics.Metric)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockMetricCollectorMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockMetricCollector)(nil).GetMetrics))
}

// ResetMetrics mocks base method.
func (m *MockMetricCollector) ResetMetrics() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetMetrics")
}

// ResetMetrics indicates an expected call of ResetMetrics.
func (mr *MockMetricCollectorMockRecorder) ResetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMetrics", reflect.TypeOf((*MockMetricCollector)(nil).ResetMetrics))
}

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// GetRuntimeMetrics mocks base method.
func (m *MockGetter) GetRuntimeMetrics() runtimeinfo.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeMetrics")
	ret0, _ := ret[0].(runtimeinfo.Stats)
	return ret0
}

// GetRuntimeMetrics indicates an expected call of GetRuntimeMetrics.
func (mr *MockGetterMockRecorder) GetRuntimeMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeMetrics", reflect.TypeOf((*MockGetter)(nil).GetRuntimeMetrics))
}
